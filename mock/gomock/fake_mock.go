// Code generated by MockGen. DO NOT EDIT.
// Source: fake.go

// Package gomock is a generated GoMock package.
package gomock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFaker is a mock of Faker interface.
type MockFaker struct {
	ctrl     *gomock.Controller
	recorder *MockFakerMockRecorder
}

// MockFakerMockRecorder is the mock recorder for MockFaker.
type MockFakerMockRecorder struct {
	mock *MockFaker
}

// NewMockFaker creates a new mock instance.
func NewMockFaker(ctrl *gomock.Controller) *MockFaker {
	mock := &MockFaker{ctrl: ctrl}
	mock.recorder = &MockFakerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFaker) EXPECT() *MockFakerMockRecorder {
	return m.recorder
}

// DoSth mocks base method.
func (m *MockFaker) DoSth() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DoSth")
}

// DoSth indicates an expected call of DoSth.
func (mr *MockFakerMockRecorder) DoSth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoSth", reflect.TypeOf((*MockFaker)(nil).DoSth))
}

// Get mocks base method.
func (m *MockFaker) Get(key string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(int)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockFakerMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFaker)(nil).Get), key)
}

// Print mocks base method.
func (m *MockFaker) Print(x interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Print", x)
}

// Print indicates an expected call of Print.
func (mr *MockFakerMockRecorder) Print(x interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Print", reflect.TypeOf((*MockFaker)(nil).Print), x)
}
